1. send whole line cpu to cpu
2. cpu invalidate signal 

///////////////////
have wait state for write in bus sm
different invalidate as the ones in bus sm, 
this invalidate is when search found is true, and we want to invalidate the block in p0

cases we focus on for later:
read miss case where we need to evict
######################################11.22###########################################
1. multiple lw in a row fails, some are overwritten
2. 2 lw to different addresses in succession works, something wrong with address capture

######################################11.8###########################################
1. one proc doing NOOPs and one proc doing memory operations

2. wait state if dmem is the source, do the datasel mux select once u_rdy

3. write miss will also have a bus transaction (u_rdy)

4. evict -> write what ur evicting, 

######################################11.8###########################################
1. verify block diagram writing to data mem
2. when a new line is written, and no cache entry corresponds to it, it should write to main mem
3. 

Completed:
1. check 1, add grant functionality for u_ commands in IDLE state for bus sm
2. add functioanlity for cpu_inv_from_other_cpu
3. write miss functionality, added cpu search

----------
deprecated: bus.sv

typedef enum reg [1:0] {IDLE, CPU0, CPU1} state_t;
	state_t state, nxt_state;
	
	always_ff @ (posedge clk, negedge rst_n) begin
		if (rst_n) 
			state <= IDLE;
		else
			state <= nxt_state;
	end
	
	always_comb begin
		cpu0_dmem_permission = 0;
		cpu1_dmem_permission = 0;
		nxt_state = state;
		case (state)
			IDLE: begin
				if (dmem_rdy) begin
					if (cpu0_u_we | cpu0_u_re) begin
						cpu0_dmem_permission = 1;
						nxt_state = CPU0;
					end else if (cpu1_u_we | cpu1_u_re) begin
						cpu1_dmem_permission = 1;
						nxt_state = CPU1;
					end else
						nxt_state = IDLE;
				end
				else
					nxt_state = IDLE;
			end
		
			CPU0: begin
				nxt_state = IDLE;
			end
			
			// CPU1
			default: begin
				nxt_state = IDLE;
			end
	
		endcase
	end

######################################11.1###########################################
first
1. read -> miss -> bus.
2. we state switch on !d_hit

Solved issues:
1. working dirty bit into eviction policy

new independent cache controller built, mem_hierarchy structure discarded

Open issues:
1. dfill, set_dirty logic resolving, u signals resolve to main memory
2. testbench for read_miss
3. mem controls with 2 cpus going into dmem

Deprecated:
			READ: begin
				d_rdy = 0;
				nxt_state = IDLE;
				
				end
			WRITE: begin // WRITE state
				d_rdy = 0;
				nxt_state = IDLE;
				
			end

######################################10.25###########################################
Open Issues:

1. mm_re is open in both cpu's at top level

Successes 

1. completed read_miss signals, first pass on sending data from one proc to another using cache. 
setup cache read for this forwarding, exactly like normal cache read.

send data uisng cache read (cache 53-56), 
receive data and widened multiplex to select into other proc's cache (mem_h 193-204)

2. state additions/modifications to cache -> if a controller wants to write to a shared block, change state to modiff, 
it sends invalidate to the other processor and main memory -> write miss will change the other blocks state to invalidate 

3. invalidate request from other processor for a shared block -> invalidate state

4. modified state block, other proc wants to read, change state to shared in original cache
forward data to new proc and set state there to shared

5. modified state block, other proc wants to write, invalidate original (now stale) copy
other block writes new data and changes state to modified on its own new copy

Qs

1. memory signals ported from mem_hierarchy should be sent to bus or directly interfaced
to send to memory? grant? who gets to write in contention case

2. states of MSI onto valid/dirty? new bits? some combination?


######################################10.18###########################################

Current Todos:

set_dirty logic from statemachine rev

stalling, cache-access of cpu1 mandated by cpu1? or is bus and cpu0 free to access it

Issues:

1. A block can be in one of the following states in the three memories

	Cache of CPU 1		Cache of CPU 2		DMEM

1.	VALID				VALID				VALID    --> SHARED

2. 	VALID				INVALID 			INVALID  --> MODIFIED

3. 	VALID 				INVALID 			VALID    --> MODIFIED (AFTER WRITE BACK)

4.  INVALID 			INVALID 			INVALID  --> D.N.E 

5.  INVALID 			INVALID 			VALID    --> BLOCK HAS NEVER BEEN CALLED

2. 


